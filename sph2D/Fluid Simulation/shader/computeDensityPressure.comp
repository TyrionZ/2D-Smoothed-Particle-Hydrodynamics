// state equation based algorithm (SESPH)
// foreach particle i do
//   compute density;
//   compute pressure;
// foreach particle i do
//   compute all forces;
// foreach particle i do
//   integrate;12 v
//   handle collision;

#version 450
#extension GL_ARB_shading_language_420pack : enable

#define M_PI 3.14159265358979323846f
#define WORK_GROUP_SIZE 128

layout(local_size_x = WORK_GROUP_SIZE) in;

struct Particle {
	vec2 position;
	vec2 velocity;
	vec2 force;
	float density;
	float pressure;
};

layout(std430, binding = 0) buffer positionBlock {
	Particle particles[];
};

const float particleLength = 0.005f;
const float particleMass = 0.8f * particleLength * particleLength * 1000;
const float smoothingRadius = 4 * particleLength;
const float restingDensity = 800.f;
const float stiffness = 2000.f;
const uint particleCount = 20000;

float kernelPoly6(vec2 o, float h) {
	float r2 = o.x * o.x + o.y * o.y;
	float h2 = h * h;
	return 315.f * (pow(h2 - r2, 3)) / (64.f * M_PI * pow(h, 9));
}



void main() {
	uint particleIndex = gl_GlobalInvocationID.x;
	if (particleIndex >= particleCount) 
		return;

	vec2 positionX = particles[particleIndex].position;

	// compute density
	float densitySum = 0.f;
	for (uint i = 0; i < particleCount; ++i) {
		vec2 positionI = particles[i].position;
		vec2 positionDelta = positionX - positionI;
		if (length(positionDelta) < smoothingRadius)
			densitySum += particleMass * kernelPoly6(positionDelta, smoothingRadius);
	}
	particles[particleIndex].density = densitySum;

	particles[particleIndex].pressure = max(stiffness * (densitySum - restingDensity), 0.f);
}


