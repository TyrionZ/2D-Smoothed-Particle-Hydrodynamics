#version 450
#extension GL_ARB_shading_language_420pack : enable

#define M_PI 3.14159265358979323846f
#define WORK_GROUP_SIZE 128

layout(local_size_x = WORK_GROUP_SIZE) in;

struct Particle {
	vec2 position;
	vec2 velocity;
	vec2 force;
	float density;
	float pressure;
};

layout(std430, binding = 0) buffer positionBlock {
	Particle particles[];
};

const float timeInterval = 0.0001f;
const float restitutionCoefficient = 0.3f;
const uint particleCount = 20000;

void main() {
	uint particleIndex = gl_GlobalInvocationID.x;

	if (particleIndex >= particleCount)
		return;

	// update velocity and position
	vec2 positionX = particles[particleIndex].position;
	float densityX = particles[particleIndex].density;
	vec2 velocityX = particles[particleIndex].velocity;
	vec2 forceX = particles[particleIndex].force;

	vec2 _velocity = velocityX + timeInterval * forceX / densityX;
	vec2 _position = positionX + timeInterval * _velocity;

	// handle boundary collision
	if (_position.x < -1) {
		_position.x = -1;
		_velocity.x *= -1 * restitutionCoefficient;
	} else if (_position.x > 1) {
		_position.x = 1;
		_velocity.x *= -1 * restitutionCoefficient;
	} else if (_position.y < -1) {
		_position.y = -1;
		_velocity.y *= -1 * restitutionCoefficient;
	} else if (_position.y > 1) {
		_position.y = 1;
		_velocity.y *= -1 * restitutionCoefficient;
	}

	particles[particleIndex].velocity = _velocity;
	particles[particleIndex].position = _position;
}